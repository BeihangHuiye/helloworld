#include<iostream>
using namespace std;

int main03()
{
	// 数组，就是一个就是相同数据类型的集合
	// 特点1：数组中的数据类型必须相同
    // 特点2：数组中的元素是有序的，并且由连续的内存组成
    // 特点3：数组中的元素可以通过下标进行访问，下标从0开始，到最大下标为数组长度-1
	// 特点4：数组中的元素可以通过下标进行修改，但是不能修改数组长度，数组的名称也不能修改，是一个常量

	//1.1 一维数组的定义
    // 语法：
	// （1）数据类型 数组名[数组长度];
	// （2）数据类型 数组名[元素个数] = {元素1，元素2，元素3，...};
	// （3）数据类型 数组名[] = {元素1，元素2，元素3，...};

	// （1）数据类型 数组名[数组长度];
	// 直接定义一个数组，知道有多少个元素
	int score_1[5];
    // 给数组赋值
    score_1[0] = 100;
    score_1[1] = 90;
    score_1[2] = 80;
    score_1[3] = 70;
    score_1[4] = 60;


	//（2）数据类型 数组名[元素个数] = { 元素1，元素2，元素3，... };
	// 直接定义一个数组，知道有多少个元素，并且给数组赋了一个初始的值
    // 注意：如果初始化时，没有给数组全部赋值，则剩余的元素会被初始化为0
	int score_2[5] = { 100, 90, 80 };
	// 访问数组是通过下标的方式：数组名[下标] = 值; 注意下标从0开始，到最大下标为数组长度-1
	/*
    cout << score_2[0] << endl;
    cout << score_2[1] << endl;
    cout << score_2[2] << endl;
	cout << score_2[3] << endl;
    cout << score_2[4] << endl;
	*/

	// （3）数据类型 数组名[] = {元素1，元素2，元素3，...};
    // 定义一个数组，不知道有多少个元素，但是给数组赋了一个初始的值
    int score_3[] = { 100, 90, 80, 70, 60, 50, 40, 30, 20, 10};

	// 1.2 一维数组名称用途
    //		数组名表示整个数组，用于统计整个数组在内存中的长度
	int arr_1[5] = { 1, 2, 3, 4, 5 };
    cout << "整个数组占用内存空间为：" << sizeof(arr_1) << endl; // 答案是20，因为每个int类型占4个字节，5个int类型就是20个字节
	cout << "每个元素占用内存空间为：" << sizeof(arr_1[0]) << endl;
    cout << "数组中元素个数为：" << sizeof(arr_1) / sizeof(arr_1[0]) << endl;

    //		数组名表示首元素的地址
	//      取地址的语法：&数组名[下标]
	cout << "数组首元素地址为：" << int(arr_1) << endl;
    cout << "数组首元素地址为：" << int(&arr_1[0]) << endl;
    cout << "数组第二个元素地址为：" << int(&arr_1[1]) << endl;

	// 练习1：比较五个数，找出最大值
    int arr_2[5] = { 136, 15, 32, 416, 57 };
    int max = 0;
    for (int i = 0; i < 5; i++)
    {
        if (arr_2[i] > max)
        {
            max = arr_2[i];
        }
    }
    cout << "最大值为：" << max << endl;

    // 练习2：数组元素进行转置
    int arr_3[5] = { 1, 2, 3, 4, 5 };
    int temp = 0;
    // （1）记录起始下标位置
    int start = 0;
    // （2）记录结束下标位置
    int end = sizeof(arr_3) / sizeof(arr_3[0]) - 1;
    // （3）循环交换元素，直到起始下标大于等于结束下标
    while (start < end)
    {
        temp = arr_3[start];
        arr_3[start] = arr_3[end];
        arr_3[end] = temp;
        start++;
        end--;
    }
    for (int i = 0; i < sizeof(arr_3) / sizeof(arr_3[0]); i++)
    {
        cout << arr_3[i] << endl;
    }

    // 练习3：冒泡排序
    // （1）比较相邻的元素，如果第一个比第二个大，就交换他们两个
    // （2）对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素会是最大的数
    // （3）针对所有的元素重复以上的步骤，除了最后一个
    // （4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较
    // 
    //  排序总轮数：数组长度-1
    //  每一轮比较次数：数组长度-1-当前轮数
    
    //  数据为{4, 2, 8, 0, 5, 7, 1, 3, 9, 6}

   int data_num[10] = { 4, 2, 8, 0, 5, 7, 1, 3, 9, 6};
   cout << "排序前的数据：" << endl;
   for (int i = 0; i < sizeof(data_num) / sizeof(data_num[0]); i++)
   {
       cout << data_num[i] <<" " ;
   }
   cout << endl;

   // 现在进行冒泡排序
   // 数组长度
   int length = sizeof(data_num) / sizeof(data_num[0]);
   // 排序总轮数：数组长度-1
   int total_epoch = length - 1;
   for (int i = 0; i < total_epoch - 1; i++)
   {
       // 每一轮比较次数：数组长度-1-当前轮数,j是当前轮次
       for (int j = 0; j < length - 1 - i; j++)
       {
           if (data_num[j] > data_num[j + 1])
           {
               int temp = data_num[j];
               data_num[j] = data_num[j + 1];
               data_num[j + 1] = temp;
           }
       }
   }

   cout << "排序后的数据：" << endl;
   for (int i = 0; i < sizeof(data_num) / sizeof(data_num[0]); i++)
   {
       cout << data_num[i] << " ";
   }
   cout << endl;

   //   1.2 二维数组的定义二维数组
   //   方法一： 直接确定二维数组的行和列数，数组名[行数][列数]
   int arr_4[2][3];
   arr_4[0][0] = 1;
   arr_4[0][1] = 2;
   arr_4[0][2] = 3;
   arr_4[1][0] = 4;
   arr_4[1][1] = 5;
   arr_4[1][2] = 6;

   //   方法二： 直接确定二维数组的行和列数并进行赋值，
   //           数组名[行数][列数]={{元素1，元素2，元素3，...},{元素1，元素2，元素3，...}, ...}
   int arr_5[2][3] = { {1,2,3},{4,5,6} };

   //   方法三： 数据类型 数组名[行数][列数] = {元素1，元素2，元素3，...}
   int arr_6[3][3] = { 1,2,3,4,5,6 }; // 默认按照行进行赋值,即先给第一行赋值，再给第二行赋值
   for (int i = 0; i < 3; i++)
   {
       for (int j = 0; j < 3; j++)
       {
           cout << arr_6[i][j] << " ";
       }
       cout << endl;
   }

   //   方法四： 数据类型 数组名[ ][列数] = {元素1，元素2，元素3，...}
   int arr_7[ ][3] = { 1,2,3,4,5,6 }; // 默认按照行进行赋，自动进行，确定列数之后，自动计算行数



   // 1.3 二维数组的数组名
   //    数组名的用处：
   //    1. 可以获取数组所占内存空间的大小
   //    2. 可以获取二维数组的首地址
   //    二维数组的数组名是一个指针，指向该二维数组的首元素，即第一行
   int arr_8[2][3] = { {1,2,3},{4,5,6} };
   cout << "二维数组的数组名：" << arr_8 << endl;
   cout << "二维数组所占内存空间的大小：" << sizeof(arr_8) << endl;
   cout << "二维数组首地址：" << &arr_8 << endl;
   cout << "二维数组第一行首地址：" << &arr_8[0] << endl;
   cout << "二维数组第一行内容：" << arr_8[0] << endl; //实际上也是输出的地址
   cout << "二维数组第二行首地址：" << &arr_8[1] << endl;

   //通过代码的方式获得行和列
   int row = sizeof(arr_8) / sizeof(arr_8[0]);
   int col = sizeof(arr_8[0]) / sizeof(arr_8[0][0]);
   cout << "二维数组的行数：" << row << endl;
   cout << "二维数组的列数：" << col << endl;

    system("pause");
	return 0;

}